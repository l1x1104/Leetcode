/***
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
***/

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        StringBuilder sb = new StringBuilder("");
        helper(n, n, sb, res);
        return res;
    }
    public void helper(int left, int right, StringBuilder sb, List<String> res) {
        if(left == 0 && right == 0) {
		    res.add(new String(sb.toString()));
		    return;
        }
        if(left < 0 || right < 0 || left > right) {
            return;
        }

        sb.append("(");
        helper(left - 1, right, sb, res);
        sb.deleteCharAt(sb.length() - 1);
        
        sb.append(")");
        helper(left, right - 1, sb, res);
        sb.deleteCharAt(sb.length() - 1);
    }
 }
