/***
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate 
numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
***/
分析： 1) 第一点要求 must not contain duplicate combinations通过sort之后(i > 0 && !visited[i - 1] && candidates[i] == candidates[i - 1])
         跳过相同元素实现
      2) 第二点要求 only be used once通过 start = 上次index i 往后+1实现

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tempList = new ArrayList<>();
        Arrays.sort(candidates);
        boolean[] visited = new boolean[candidates.length];
        helper(candidates, target, visited, 0, 0, tempList, res);
        return res;
    }
    private void helper(int[] candidates, int target, boolean[] visited, int sum, int start, List<Integer> tempList, List<List<Integer>> res) {
        if (sum > target) {
            return ;
        } else if (sum == target) {
            res.add(new ArrayList(tempList));
            return ;
        } 
        for (int i = start; i < candidates.length; ++i) {
            if (i > 0 && !visited[i - 1] && candidates[i] == candidates[i - 1]) continue;
            tempList.add(candidates[i]);
            visited[i]  = true;
            helper(candidates, target, visited, sum + candidates[i], i + 1, tempList, res);
            tempList.remove(tempList.size() - 1);
            visited[i] = false;
            
        }
    }
}
