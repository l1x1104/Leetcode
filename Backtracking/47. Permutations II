/***
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
***/

class Solution {
    public static List<List<Integer>> permuteUnique(int[] nums) {
    	List<List<Integer>> list = new ArrayList<>();
	Arrays.sort(nums);
	helper(list, new ArrayList<>(), nums, new boolean[nums.length]);
	return list;
    }

    private static void helper(List<List<Integer>> res, List<Integer> tempList, int [] nums, boolean [] used){
	if(tempList.size() == nums.length)  {
		res.add(new ArrayList<>(tempList));
    	} else {
    		for(int i = 0; i < nums.length; i++){
		if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue;
		used[i] = true; 
		tempList.add(nums[i]);
		helper(res, tempList, nums, used);
		used[i] = false; 
		tempList.remove(tempList.size() - 1);
    	}
    }
 }
