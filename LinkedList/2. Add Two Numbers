/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each
of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        int carry = 0;
        while(l1 != null || l2 != null) {
            int sum = carry + (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);
            if(l1 != null)l1 = l1.next;
            if(l2 != null)l2 = l2.next;
            ListNode curr = new ListNode(sum % 10);
            head.next = curr;
            head = head.next;
            carry = sum / 10;
            if(l1 == null && l2 == null && carry == 1) head.next = new ListNode(1);
        }
        return dummy.next;
    }
 }

/*
Question: Add Two Numbers II
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each
of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
*/
有两种方法反转list。 #2用stack
#1指针操作
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        int carry = 0;
        while(l1 != null || l2 != null) {
            int sum = carry + (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
            head.next = new ListNode(sum % 10);
            head = head.next;
            carry = sum / 10;
            if(carry == 1 && l1 == null && l2 == null) head.next = new ListNode(1);
        }
        return reverseList(dummy.next);
    }
    private ListNode reverseList(ListNode curr) {
        ListNode prev = null;
        while(curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
 }
