/*
Reverse a singly linked list.
*/
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}

/*** 92. Reverse Linked List II
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
***/
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode curr =  new ListNode(0);
        curr.next = head;
        ListNode fast = curr;
        for(int i = 0; i < m - 1; i++) {
            fast = fast.next;
        }
        ListNode first = fast, second = fast.next;
        curr = second;
        ListNode prev = null;
        for(int i = 0; i < n - m + 1; i++) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        first.next = prev;
        second.next = curr;
        if(m == 1) return first.next;
        return head;
    }
}
// 注意Line49，当m==1，不能返回head,此时first一定在head之前的“幽灵位置”，返回first.next.
