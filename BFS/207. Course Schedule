 ※一道看似简单的题，无数坑

/***
There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a 
pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should 
also have finished course 1. So it is impossible.

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is 
represented.

You may assume that there are no duplicate edges in the input prerequisites.
***/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] inDegree = new int[numCourses];
        if (prerequisites.length == 0 || prerequisites[0].length == 0) return true;
        
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < numCourses; i++) {
            map.put(i, new HashSet<>());
        }
        
        // Count Degree && record mapping: pre -> neighbor
        getIndegree(inDegree, map, prerequisites);
        
        // getStartPoints -> bfs
        Queue<Integer> q = new LinkedList<>();
        for (int x = 0; x < inDegree.length; x++) {
            if (inDegree[x] == 0) q.offer(x);
        }
        
        while (!q.isEmpty()) {
            Integer cur = q.poll();
            for (Integer nb: map.get(cur)) {
                inDegree[nb] -= 1;
                if (inDegree[nb] == 0) q.offer(nb);
            }
        }
        
        for (Integer j: inDegree) {
            if (j != 0) return false;
        }
        return true;
    }
    private void getIndegree(int[] degree, Map<Integer, Set<Integer>> map, int[][] prerequisites) {
        for (int i =  0; i < prerequisites.length; i++) {
            degree[prerequisites[i][0]] += 1;
            map.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
    }
 }
