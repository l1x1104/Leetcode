/***
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a 
permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the 
sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is 
only one sequence that can be reconstructed from seqs and it is the org sequence.

Example 1:

Input:
org: [1,2,3], seqs: [[1,2],[1,3]]

Output:
false

Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.

Example 2:

Input:
org: [1,2,3], seqs: [[1,2]]

Output:
false

Explanation:
The reconstructed sequence can only be [1,2].
Example 3:

Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

Output:
true

Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
Example 4:

Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

Output:
true
***/
        // 拓扑排序实质是给定edges，判断由这些edges->node构造出来的path是否满足要求。
        // 有两种情况不满足要求: 1. 这条path并没有连通所有node，即nodes个数!=graph中node个数
        //                    2. 自我死循环，即没有startNode which indegree = 0
        // 由此推导出此题，从seqs构建nodes和他们的neighbors。 用queue实现bfs，从indegree == 0的点开始往后找
        // 每一步必须保证：queue里的数<=1，否则说明存在不是唯一的路径.
        // 走完所有的点以后: 1. count有可能不等于seqs中所有的nodes(有点被遗忘了，不满足要求1)/或者坚持indegree是否还有点degree=0
        //                2. count!=org.length 比如题目给的example2,即org中存在path没有的点.
class Solution {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        Map<Integer, Integer> indegree = new HashMap<>();
        Map<Integer, Set<Integer>> map = new HashMap<>();
        
        for (List<Integer> sub: seqs) {
            if (sub.size() == 1) {
                if (!map.containsKey(sub.get(0))) {
                    indegree.put(sub.get(0), 0);
                    map.put(sub.get(0), new HashSet<>());
                }
            } else {
                for (int x = 0; x < sub.size() - 1; x++) {
                    int curr = sub.get(x), next = sub.get(x + 1);
                    if (!map.containsKey(curr)) {
                        map.put(curr, new HashSet<>());
                        indegree.put(curr, 0);
                    }
                    if (!map.containsKey(next)) {
                        map.put(next, new HashSet<>());
                        indegree.put(next, 0);
                    }
                    if (map.get(curr).add(next)) {
                        indegree.put(next, indegree.get(next) + 1);
                    }
                }
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(Map.Entry<Integer, Integer> entry: indegree.entrySet()) {
            if(entry.getValue() == 0) q.offer(entry.getKey());
        }
        int count = 0;
        while (!q.isEmpty()) {
            int curr = q.poll();
            if (count == org.length || curr != org[count++] || q.size() > 0) return false;
            for (Integer next: map.get(curr)) {
                indegree.put(next, indegree.get(next) - 1);
                if (indegree.get(next) == 0) q.offer(next);
            }  
        }
        
        return count == org.length && count == map.size();
    }
}
