/*
 Date:       Dec 25, 2017
 Update:     Dec 25, 2017
 Problem:    Closest Binary Search Tree Value
 Difficulty: Easy
 Notes:
 Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
 Note: 1. Given target value is a floating point.
       2. You are guaranteed to have only one unique value in the BST that is closest to the target.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public int closestValue(TreeNode root, double target) {
        int min = Integer.MAX_VALUE;
        double tmp = Float.MAX_VALUE;
        Stack<TreeNode> s =  new Stack<>();
        TreeNode curr = root;
        while(!s.isEmpty() || curr != null) {
            while(curr != null) {
                s.push(curr);
                curr = curr.left;
            }
            curr = s.pop();
            if(Math.abs(target - curr.val) < tmp) {
                min = curr.val;
                tmp = Math.abs(target - curr.val);
            }
            curr = curr.right;
        }
        return min;
    }
}
