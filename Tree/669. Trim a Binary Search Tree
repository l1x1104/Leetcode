
#1 Recursive Solution
public TreeNode trimBST(TreeNode root, int L, int R) {
    if(root == null) {
        return root;
    }
    if(root.val < L) {
        return trimBST(root.right, L, R);
    }
    if(root.val > R) {
        return trimBST(root.left, L, R);
    }
    root.left = trimBST(root.left, L, R);
    root.right = trimBST(root.right, L, R);\
    
    return root;
}

#2 Recursive Solution(Postorder Traversal)
public TreeNode trimBST(TreeNode root, int L, int R) {
    if (root == null) return null;
    
    TreeNode left = trimBST(root.left, L, R);
    TreeNode right = trimBST(root.right, L, R);
    
    if (root.val < L) return right;
    if (root.val > R) return left;
    
    root.left = left;
    root.right = right;
    return root;
}

#3 Iterative Solution
root和其他点情况不一样，不用考虑node父节点，需要更新父节点.next到merge上来节点的地址，故单独处理。
Leaf node直接删除即可。
剩下只需遍历。
public TreeNode(TreeNode root, int L, int R) {
        if (root == null) {
            return root;
        }
        //Find a valid root which is used to return.
        while (root.val < L || root.val > R) {
            if (root.val < L) {
                root = root.right;
            }
            if (root.val > R) {
                root = root.left;
            }
        }
        TreeNode dummy = root;
        // Remove the invalid nodes from left subtree
        while (dummy != null) {
            while (dummy.left != null && dummy.left.val < L) {
                dummy.left = dummy.left.right; 
                // If the left child is smaller than L, then we just keep the right subtree of it. 
            }
            dummy = dummy.left;
        }
        dummy = root;
        // Remove the invalid nodes from right subtree
        while (dummy != null) {
            while (dummy.right != null && dummy.right.val > R) {
                dummy.right = dummy.right.left;
                // If the right child is biggrt than R, then we just keep the left subtree of it. 
            }
            dummy = dummy.right;
        }
        return root;    
}
