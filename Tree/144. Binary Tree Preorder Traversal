#1 Iterative Solution using Stack
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    Stack<TreeNode> s = new Stack<TreeNode>();
    s.push(root);
    while(!s.isEmpty()) {
        TreeNode curr = s.pop();
        res.add(curr.val);
        if(curr.right != null) {
            s.push(curr.right);
        }
        curr = curr.left;
        if(curr.left != null) {
            s.push(curr.left);
        }
    }
    return res;
}
#2 Recursive Solution 
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    if(root == null) {
        return res;
    }
    helper(root, res);
    return res;
}
public void helper(TreeNode root, List<Integer> res) {
    if(root == null) {
        return;
    }
    res.add(root.val);
    helper(root.left, res);
    helper(root.right, res);
}

Update:
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> s = new Stack<>();
        while(!s.isEmpty() || root != null) {
            res.add(root.val);
            if(root.right != null) s.push(root.right);
            root = root.left;
            if(root == null && !s.isEmpty()) {
                root = s.pop();
            }
        }
        
        return res;
    }

Update:
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        while(!s.isEmpty()) {
            TreeNode tmp = s.pop();
            res.add(tmp.val);
            if(tmp.right != null) s.push(tmp.right);
            if(tmp.left != null) s.push(tmp.left);
        }
        return res;
    }
}
