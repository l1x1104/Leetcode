   #1 DFS inorder iterative
   public int kthSmallest(TreeNode root, int k) {
        int count = k;
        Stack<TreeNode> s = new Stack<>();
        TreeNode curr = root;
        while(!s.isEmpty() || curr != null) {
            while(curr != null) {
                s.push(curr);
                curr = curr.left;
            }
            curr = s.pop();
            if((--count) == 0) {
                return curr.val;
            }
            curr = curr.right;    
        }
        return 0;
    }

   #2 DFS inorder recursive
class Solution {
    //private int cnt = 0;
    public int kthSmallest(TreeNode root, int k) {
         if(root == null) return 0;
         int[] count = new int[2];
         count[1] = k;
         helper(root, k, count);
         return count[0];
   }
   public void helper(TreeNode root, int k, int[] count) {
         if(root == null) return ;
         if(root.left != null) helper(root.left, k, count);
         count[1] --;
         if(count[1] == 0) {
            count[0] = root.val;
            return ;
         }
         if(root.right != null) helper(root.right, k, count);
   }
}
   
   Follow up: What if the BST is modified(delete/insert) frequently and you still need to find the kth smallest? How would you 
              optimize the kth smallest routine?
