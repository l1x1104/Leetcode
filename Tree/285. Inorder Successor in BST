
Successor
一个节点的successor两种情况： 父节点或者右子树里最小的节点                 父
                                                                 左   右
                                                                    左  右
                                                                  左(min) 右

#1 Iterative Solution
  public TreeNode successor(TreeNode root, TreeNode p) {
      if(root == null) return root;
      TreeNode next = null;
      while(root != null) {
          if(p.val < root.val) {
              next = root;
              root = root.left;
          }else {
              root = root.right;
          }
      }
      return next;
  }
  
#2 Recursive
class Solution {
    private boolean next = false;
    private TreeNode[] res = new TreeNode[1];
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // 1. Find the node p
        // 2. Find the next node
        inOrderTraversal(root, p);
        return res[0];
    }
    private void inOrderTraversal(TreeNode root, TreeNode p) {
        if (root == null) {
            return ;
        }
        inOrderTraversal(root.left, p);
        if (root.val == p.val) {
            next = true;
        } else if (next) {
            res[0] = root;
            next = false;
        }
        inOrderTraversal(root.right, p);
    }
}
  
Predecessor
  public TreeNode predecessor(TreeNode root, TreeNode p) {
      if(root == null) return null;
      if(p.val <= root.val) return predecessor(root.left, p);
      else {
          TreeNode right = predecessor(root.right, p);
          if(right == null) return right;
          else return right;
      }
  }
