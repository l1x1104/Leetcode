/*
 Date:       Dec 12, 2017
 Update:     Dec 24, 2017
 Problem:    Unique Binary Search Trees II
 Difficulty: Medium
 Notes:
 Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.
 For example:
 Given n = 3, your program should return all 5 unique BST's shown below.
 1         1          2        3        3
  \         \        / \      /        /
   2         3      1   3    1        2
    \       /                 \      /
     3     2                   2    1
 Solution: 1. Recursive solution.      Time: O(n), Space: O(n).
           3. DP.                      Time: O(n), Space: O(1).
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#1 Simple Recursive
public List<TreeNode> generateTrees(int n) {
    List<TreeNode> res = new ArrayList<>();
    if(n == 0) {
        return res;
    }
    res = helper(1, n);
    return res;
}
public List<TreeNode> helper(int start, int end) {
    List<TreeNode> res = new ArrayList<>();
    if(start > end) {
        res.add(null);
        return res;
    }else if(start == end) {
        res.add(new TreeNode(start));
        return res;
    }
    for(int k = start; k <= end; k++) {
        List<TreeNode> leftSub = helper(start, k - 1);
        List<TreeNode> rightSub = helper(k + 1, end);
        for (TreeNode i : leftSub) {
            for (TreeNode j : rightSub) {
            TreeNode root = new TreeNode(k);
                root.left = i;
                root.right = j;
                res.add(root);
            }
        }
    }
    return res;
}
#2 DP using HashMap
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<TreeNode> res = new LinkedList<>();
        if(n <= 0) return res;
        Map<String,List<TreeNode>> map = new HashMap<>();
        return helper(1, n, map);
    }
    private List<TreeNode> helper(int start, int end, Map<String, List<TreeNode>> mp) {
        if(mp.containsKey(start + "," + end)) return mp.get(start + "," + end);
        List<TreeNode> res = new LinkedList<>();
        if(start > end) {
            res.add(null);
            return res;
        }
        for(int i = start; i <= end; i++) {
            List<TreeNode> leftSub = helper(start, i - 1, mp);
            List<TreeNode> rightSub = helper(i + 1, end, mp);
            for(TreeNode l: leftSub) {
                for(TreeNode r: rightSub) {
                    TreeNode root = new TreeNode(i);
                    root.left = l;
                    root.right = r;
                    res.add(root);
                }
            }
        }
        mp.put(start + "," + end, res);
        return res;
    }
}

#3 DP using 2D array for memorization(fastest)
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n < 1) return new ArrayList<>();
        List<TreeNode>[][] dp = new List[n+2][n+2];
        return helper(1, n, dp);
    } 
    public List<TreeNode> helper(int start, int end, List[][] dp){
        if(dp[start][end] != null) return dp[start][end];
        List<TreeNode> list = new ArrayList<>();
        if(start > end){
            list.add(null);
        }else if(start==end){
            list.add(new TreeNode(start));
        }else {
             for(int i = start; i <= end; i++){
                List<TreeNode> left = helper(start, i-1, dp);
                List<TreeNode> right = helper(i+1, end, dp);
                for(TreeNode l : left){
                    for(TreeNode r : right){
                    TreeNode node = new TreeNode(i);
                    node.left = l;
                    node.right = r;
                    list.add(node);
                    }
                }
            }
        }
        dp[start][end] = list;
        return list; 
    }
}
