第一题、 102. Binary Tree Level Order Traversal
    #1 bfs 
    #2 dfs solution
        class Solution {
            public List<List<Integer>> levelOrder(TreeNode root) {
                List<List<Integer>> res = new ArrayList<>();
                helper(root, 0, res);
                return res;
            }
            public void helper(TreeNode root, int level, List<List<Integer>> res) {
                if(root == null) return ;
                if(level == res.size()) res.add(new LinkedList<>());
                res.get(level).add(root.val);
                helper(root.left, level + 1, res);
                helper(root.right, level + 1, res);
            }
        }

第二题、 ZigZag levelOrder traversal
        class Solution {
            public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
                List<List<Integer>> res = new ArrayList<>();
                helper(root, 0, res);
                return res;
            }
            public void helper(TreeNode root, int level, List<List<Integer>> res) {
                if(root == null) return ;
                if(level == res.size()) res.add(new LinkedList<>());
                if(level % 2 == 0) res.get(level).add(root.val);
                else res.get(level).add(0, root.val);
                helper(root.left, level + 1, res);
                helper(root.right, level + 1, res);
            }
        }
    
第三题、 104. Maximum Depth of Binary Tree
        class Solution {
            public int maxDepth(TreeNode root) {
                if(root == null) return 0;
                int left = maxDepth(root.left);
                int right = maxDepth(root.right);
                return 1 + Math.max(left, right);
            }
        }

第四题、 111. Minimum Depth of Binary Tree
     #1 class Solution {
            public int minDepth(TreeNode root) {
                if(root == null) return 0;
                int left = minDepth(root.left);
                int right = minDepth(root.right);
                return (left == 0 || right == 0) ? left + right + 1 : 1 + Math.min(left, right) + ;
            }
        }
        或者，
     #2 class Solution {
            public int minDepth(TreeNode root) {
                if(root == null) return 0;
                if(root.left == null && root.right == null) return 1;
                else if(root.left == null || root.right == null) {
                    if(root.left != null) return 1 + minDepth(root.left);
                    if(root.right != null) return 1 + minDepth(root.right);
                }
                return 1 + Math.min(minDepth(root.left), minDepth(root.right));
            }
        }
        
第五题、 105 Construct Binary Tree from Preorder and Inorder Traversal

    画图，搞定。
        public class Solution {
            public TreeNode buildTree(int[] preorder, int[] inorder) {
                if(preorder == null|| inorder == null|| preorder.length != inorder.length) return null;
                TreeNode head = rebuildHelper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
                return head;
            }
    
            public TreeNode rebuildHelper(int[] pre, int prestart, int preend, int[] in, int instart, int inend) {
                if(instart > inend || prestart > preend) return null;
                else if( prestart == preend) return new TreeNode(pre[prestart]);
                int data = pre[prestart];
                int index = findIndex(in, instart, inend, data);
                if(index == -1) return null;
                TreeNode root = new TreeNode(data);
                int len = index - instart;
                root.left = rebuildHelper(pre, prestart + 1, prestart + len, in, instart, index - 1);
                root.right = rebuildHelper(pre, prestart + 1 + len, preend, in, index + 1, inend);
                return root;
            }
    
            public int findIndex(int[] nums, int start, int end, int target) {
                for (int t = start; t < end + 1; t ++) {
                    if (nums[t] == target) {
                        return t;
                    }
                }
                return -1;
            }
    
        }

        inorder 和 postorder
        class Solution {
            public TreeNode buildTree(int[] inorder, int[] postorder) {
                if(postorder == null|| inorder == null|| postorder.length != inorder.length) return null;
                TreeNode head = rebuildHelper(postorder, 0, postorder.length - 1, inorder, 0, inorder.length - 1);
                return head;
            }
            public TreeNode rebuildHelper(int[] post, int poststart, int postend, int[] in, int instart, int inend) {
                if(instart > inend || poststart > postend) return null;
                else if( poststart == postend) return new TreeNode(post[poststart]);
                int data = post[postend];
                int index = findIndex(in, instart, inend, data);
                if(index == -1) return null;
                TreeNode root = new TreeNode(data);
                int len = inend - index;
                root.left = rebuildHelper(post, poststart, postend - len - 1, in, instart, index - 1);
                root.right = rebuildHelper(post, postend - len, postend - 1, in, index + 1, inend);
                return root;
            }
    
            public int findIndex(int[] nums, int start, int end, int target) {
                for (int t = start; t < end + 1; t ++) {
                if (nums[t] == target) {
                    return t;
                }
            }
            return -1;
            }
        }
