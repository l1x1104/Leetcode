思路： 和102 Level Order Traversal一样

    public int findBottomLeftValue(TreeNode root) {
        int res = Integer.MIN_VALUE;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                if(tmp.right != null) {
                    q.offer(tmp.right);
                }
                if(tmp.left != null) {
                    q.offer(tmp.left);
                }
                if(q.isEmpty() && i == (size - 1)) {
                    res = tmp.val;
                }
            }
        }
        
        return res;
    }
更新： a little tricky
Doing BFS right-to-left means we can simply return the last node's value and don't have to keep track of the first node in the current row or even care about rows at all. Inspired by @fallcreek's solution (not published) which uses two nested loops to go row by row but already had the right-to-left idea making it easier. I just took that further.
```java
public int findLeftMostNode(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        root = queue.poll();
        if (root.right != null)
            queue.add(root.right);
        if (root.left != null)
            queue.add(root.left);
    }
    return root.val;
}
```
