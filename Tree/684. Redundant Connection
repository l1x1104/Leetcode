特别注意地方：假如，[[1,2],[2,7],[7,8],[2,8],[1,8]] 此时res:1,2,7,8 容易返回[1,8]。必须先去掉i第一次出现之前的所有元素，再从后遍历找到最后出现
            的edge.
In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge 
added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected
edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the 
answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.
class Solution {
    private List<Integer> allResult = new ArrayList<>();
    public int[] findRedundantConnection(int[][] edges) {
        List<Integer> list = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int[] i: edges) {
            if(map.containsKey(i[0]))   map.get(i[0]).add(i[1]);
            else {
                List<Integer> tmpList = new ArrayList<>();
                tmpList.add(i[1]);
                map.put(i[0], tmpList);
            }
            if(map.containsKey(i[1]))   map.get(i[1]).add(i[0]);
            else {
                List<Integer> tmpList = new ArrayList<>();
                tmpList.add(i[0]);
                map.put(i[1], tmpList);
            }
        } 
        helper(edges, map, 0, 1, res);
        int[] rst = new int[2];
        if(allResult.get(0) < allResult.get(1)) {
            rst[0] = allResult.get(0);
            rst[1] = allResult.get(1);
        }else {
            rst[0] = allResult.get(1);
            rst[1] = allResult.get(0);
        }
        return rst;
    }
    public void helper(int[][] edges, Map<Integer, List<Integer>> map, int last, int target, List<Integer> res) {
        List<Integer> targetList = map.get(target);
        res.add(target);
        for(int i: targetList) {
            if(last == i) continue;
            if(res.contains(i)) {
                res = res.subList(res.indexOf(i), res.size());
                for(int t = edges.length - 1; t >= 0; t--) {
                    if(res.contains(edges[t][0]) && res.contains(edges[t][1])) {
                        allResult.add(edges[t][0]);
                        allResult.add(edges[t][1]);
                    }    
                }
                break;
            }
            res.add(i);
            helper(edges, map, target, i, res);
            res.remove(res.size() - 1);
        }
        res.remove(res.size() - 1);
    }
 }
