/*
 Date:       Dec 25, 2017
 Update:     Dec 25, 2017
 Problem:    Closest Leaf in a Binary Tree
 Difficulty: Medium
 Notes:
 Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target 
 k in the tree. Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the 
 tree. Also, a node is called a leaf if it has no children.

 In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a 
 TreeNode object.
 -----------------------
 Example 1：
 Input:
 root = [1, 3, 2], k = 1
 Diagram of binary tree:
          1
         / \
        3   2

 Output: 2 (or 3)
 Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
 -----------------------------------------------------------------------
 Example 2:
 Input:
 root = [1], k = 1
 Output: 1
 Explanation: The nearest leaf node is the root node itself.
 -----------------------------------------------------------
 Example 3:
 Input:
 root = [1,2,3,4,null,null,null,5,null,6], k = 2
 Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6
  Output: 3
  Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
  Note: 1. root represents a binary tree with at least 1 node and at most 1000 nodes.
        2. Every node has a unique node.val in range [1, 1000].
        3. There exists some node in the given binary tree for which node.val == k.
 Solution: 1. Two DFS traversal.   Time: O(n), Space: O(n).
           
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 class Solution {
    class Cell {
        int val;
        int dis;
        public Cell(int data, int distance) {
            this.val = data;
            this.dis = distance;
        }
    }
    public int findClosestLeaf(TreeNode root, int k) {
        Map<Integer, Cell> mp = new HashMap<>();
        bottomUp(root, mp);
        topDown(root, mp, mp.get(root.val));
        return mp.get(k).val;
    }
    public void bottomUp(TreeNode root, Map<Integer, Cell> map) {
        if(root.left == null && root.right == null) {
            map.put(root.val, new Cell(root.val, 0));
            return ;
        }
        Cell best = null;
        if(root.left != null) {
            bottomUp(root.left, map);
            best = map.get(root.left.val);
        }
        if(root.right != null) {
            bottomUp(root.right, map);
            if(best == null || best.dis > map.get(root.right.val).dis) {
                best = map.get(root.right.val);
            }
        }
        map.put(root.val, new Cell(best.val, best.dis + 1));
    }
    public void topDown(TreeNode root, Map<Integer, Cell> map, Cell bestAbove) {
        if(root.left == null && root.right == null) return;
        Cell curr = map.get(root.val);
        if(bestAbove.dis < curr.dis) {
            // Update
            map.replace(root.val, bestAbove);
            curr = bestAbove;
        }
        if(root.left != null) {
            topDown(root.left, map, new new Cell(curr.val, curr.dis + 1));
        }
        if(root.right != null) {
            topDown(root.right, map, new new Cell(curr.val, curr.dis + 1));
        }
    }
 }
 
 1. 能做到bottom up的方法有post-order, pre-order是从上至下-topDown.
 2. 主要算法: 先从下至上每一个node改成用Cell记录，Cell的val记录着左/右末节点的值, dis记录着左/右节点到末节点的最短距离.
 3. 用
