
#1 Recursive Solution
It's a preorder traversal.
public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null) return true;
    else if(p == null || q == null) return false;
    if(p.val == q.val) return isSameTree(p.left, q.left) && isSamteTree(p.right, q.right); 
    return false;
}
// Inorder traversal
public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null) return true;
    else if(p == null || q == null) return false;
    boolean left = isSameTree(p.left, q.left);
    if(left == false || p.val != q.val) return false;
    boolean right = isSameTree(p.right, q.right);
    return left && right;
}
// Postorder traversal
public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null) return true;
    else if(p == null || q == null) return false;
    boolean left = isSameTree(p.left, q.left);
    boolean right = isSameTree(p.right, q.right);
    if(p.val == q.val) return left && right;
    return false;
}

#2 Iteration Solution
  // Stack or Queue
  public boolean isSameTree(TreeNode p, TreeNode q) {
        Stack<TreeNode> stack_p = new Stack <> ();       
	Stack<TreeNode> stack_q = new Stack <> ();
	if (p != null) stack_p.push( p ) ;
	if (q != null) stack_q.push( q ) ;
	while (!stack_p.isEmpty() && !stack_q.isEmpty()) {
		TreeNode pn = stack_p.pop() ;
	    	TreeNode qn = stack_q.pop() ;	    	
	    	if (pn.val != qn.val) return false ;
	    	if (pn.right != null) stack_p.push(pn.right) ;
	    	if (qn.right != null) stack_q.push(qn.right) ;
	    	if (stack_p.size() != stack_q.size()) return false ;
	    	if (pn.left != null) stack_p.push(pn.left) ;	    	 	    	 
	    	if (qn.left != null) stack_q.push(qn.left) ;
	    	if (stack_p.size() != stack_q.size()) return false ;
	}		     
	return stack_p.size() == stack_q.size() ;	
    }
    
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<TreeNode> q2 = new LinkedList<>();
        if(p != null) q1.offer(p);
        if(q != null) q2.offer(q);
        
        while(!q1.isEmpty() && !q2.isEmpty()) {
            TreeNode nodeP = q1.poll();
            TreeNode nodeQ = q2.poll();
            if(nodeP.val != nodeQ.val) return false;
            if(nodeP.left != null) q1.offer(nodeP.left);
            if(nodeQ.left != null) q2.offer(nodeQ.left);
            if(q1.size() != q2.size()) return false;
            if(nodeP.right != null) q1.offer(nodeP.right);
            if(nodeQ.right != null) q2.offer(nodeQ.right);
            if(q1.size() != q2.size()) return false;
        }
        return q1.size() == q2.size();
    }
}
