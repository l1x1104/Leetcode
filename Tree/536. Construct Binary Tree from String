/*
 Date:       Dec 26, 2017
 Update:     Dec 26, 2017
 Problem:    Construct Binary Tree from String
 Difficulty: Medium
 Notes:
 You need to construct a binary tree from a string consisting of parenthesis and integers.
 The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The 
 integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
 You always start to construct the left child node of the parent first if it exists.
 Example:
 Input: "4(2(3)(1))(6(5))"
 Output: return the tree root node representing the following tree:
       4
     /   \
    2     6
   / \   / 
  3   1 5   
 Note:
 There will only be '(', ')', '-' and '0' ~ '9' in the input string.
 An empty tree is represented by "" instead of "()".
 */
 class Solution {
    public TreeNode str2tree(String s) {
        if(s == null || s.length() == 0) return null;
        int firstLeft = s.indexOf('(');
        if(firstLeft == -1) {
            return new TreeNode(Integer.parseInt(s));
        }
        TreeNode root = new TreeNode(Integer.parseInt(s.substring(0, firstLeft)));
        int count = 0, i = firstLeft;
        while(i < s.length()) {
            if(s.charAt(i) == '(') {
                count ++;
            }else if(s.charAt(i) == ')') {
                count --;
            }
            if(count == 0) {
                root.left = str2tree(s.substring(firstLeft + 1, i));
                break;
            }
            i ++;
        }
        if(i != s.length() - 1) {
            root.right = str2tree(s.substring(i + 2, s.length() - 1));
        }
        return root;
    }
  }
