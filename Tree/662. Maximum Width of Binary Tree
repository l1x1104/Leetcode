此题是222. Count Complete Tree Nodes 变形

前序遍历

class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        List<Integer> L = new ArrayList<>();
        List<Integer> R = new ArrayList<>();
        return helper(root, 0, 1, L, R);
    }
    public int helper(TreeNode root, int level, int index, List<Integer> L, List<Integer> R) {
        if(root == null) return 0;
        if(L.size() == level) {
            L.add(index);
            R.add(index);
        }else {
            R.set(level, index);
        }
        int left = helper(root.left, level + 1, index * 2, L, R);
        int right = helper(root.right, level + 1, index * 2 + 1, L, R);
        int w = R.get(level) - L.get(level) + 1;
        return Math.max(w, Math.max(left, right));
    }
}

           1
         /   \
        3     2
       / \     \  
      5   3     9 
We know that a binary tree can be represented by an array (assume the root begins from the position with index 1 in the array).
If the index of a node is i, the indices of its two children are 2*i and 2*i + 1. The idea is to use two arrays (start[] and 
end[]) to record the the indices of the leftmost node and rightmost node in each level, respectively. For each level of the 
tree, the width is end[level] - start[level] + 1. Then, we just need to find the maximum width.

    public int widthOfBinaryTree(TreeNode root) {
        return dfs(root, 0, 1, new ArrayList<Integer>(), new ArrayList<Integer>());
    }
    
    public int dfs(TreeNode root, int level, int order, List<Integer> start, List<Integer> end){
        if(root == null)return 0;
        if(start.size() == level){
            start.add(order); 
            end.add(order);
        } else {
            end.set(level, order);
        }
        int cur = end.get(level) - start.get(level) + 1;
        int left = dfs(root.left, level + 1, 2*order, start, end);
        int right = dfs(root.right, level + 1, 2*order + 1, start, end);
        return Math.max(cur, Math.max(left, right));
    }
    
    注释: 传入level为0作为初始值,通过判断list.size() ?= level来创建新一层，list 不同
      
