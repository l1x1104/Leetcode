/***
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate 
number must exist. Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.
***/
#1 Binary Search
思想：At first the search space is numbers between 1 to n. Each time I select a number mid (which is the one in the middle) and 
count all the numbers equal to or less than mid. Then if the count is more than mid, the search space will be [1 mid] otherwise
[mid+1 n]. I do this until search space is only one number.

Let's say n=10 and I select mid=5. Then I count all the numbers in the array which are less than equal mid. If the there are more
than 5 numbers that are less than 5, then by Pigeonhole Principle (https://en.wikipedia.org/wiki/Pigeonhole_principle) one of 
them has occurred more than once. So I shrink the search space from [1 10] to [1 5]. Otherwise the duplicate number is in the 
second half so for the next step the search space would be [6 10].

class Solution {
    public int findDuplicate(int[] nums) {
        int low = 1, high = nums.length - 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;
            for (int i: nums) {
                if (i <= mid) count ++;
            }
            if (count <= mid) low = mid + 1;
            else high = mid;
        }
        return low;
    }
}
注意：LINE 28/29 "+1"不能调换

#2 Floyd's Loop Detection
思想：The main idea is the same with problem Linked List Cycle II

class Solution {
    public int findDuplicate(int[] nums) {
        if (nums.length <= 1) return 0;
        int slow = nums[0];
        int fast = nums[nums[0]];
        while (fast != slow) {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        slow = 0;
        while (fast != slow) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return fast;
    }
}
根据原理，LINE49/54任意fast/slow = 0，return fast/slow都可以。
        
