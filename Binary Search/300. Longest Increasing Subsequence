/***
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS 
combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?
***/
最优解：

Time: O(nlogn)
Space: O(n)

Example: [10, 9, 2, 5, 3, 7, 101, 18]

res = size
i, j 相当于遍历tails数组起点和终点
如果出现递减，取到最小，因为我们要求连增最大

10 res = 0 i = 0 j = 0 
9  res = 1 i = 0 j = 0 mid = 0
2  res = 1 i = 1 j = 1 mid = 0
5  res = 1 i = 1 j = 1 mid = 0
3  res = 2 i = 2 j = 2 mid = 1

tails:[2,3,7,18]

class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0 || nums == null) return 0;
        int[] tails = new int[nums.length];
        int res = 0;
        for (int num : nums) {
            int i = 0, j = res;
            while (i != j) {
                int mid = (i + j) / 2;
                if (tails[mid] < num) {
                    i = mid + 1;
                }else {
                    j = mid;
                }
            }
            tails[i] = num;
            if (i == res) ++res;
        }
        return res;
    }
}
