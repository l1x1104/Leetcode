/***
Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around. For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.

Examples:
Input:
letters = ["c", "f", "j"]
target = "a"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "c"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "d"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "g"
Output: "j"

Input:
letters = ["c", "f", "j"]
target = "j"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "k"
Output: "c"
Note:
letters has a length in range [2, 10000].
letters consists of lowercase letters, and contains at least 2 unique letters.
target is a lowercase letter.
***/
class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        final int idx = binarySearch(letters, (char)('a' + target + 26 - 'z'));
        return idx >= 0 ? letters[idx] : letters[(-idx - 1) % letters.length];
    }

    private int binarySearch(final char[] letters, final char target) {
        int l = 0, r = letters.length - 1;
        while (l <= r) {
            final int m = (l + r) / 2;
            if (letters[m] < target) {
                l = m + 1;
            } else if (letters[m] > target) {
                r = m - 1;
            } else {
                return m;
            }
        }
        return -(l + 1);
    }
 }
