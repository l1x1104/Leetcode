/***
Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Note:
2 <= len(nums) <= 10000.
0 <= nums[i] < 1000000.
1 <= k <= len(nums) * (len(nums) - 1) / 2.
***/
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        int n = nums.length;
        Arrays.sort(nums);
        int min = nums[1] - nums[0];
        for (int i = 1; i < n - 1; ++i) {
            min = Math.min(min, nums[i + 1] - nums[i]);
        }
        int max = nums[n - 1] - nums[0];
        int l = min, r = max;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int kth = countPairs(nums, mid);
            if (kth < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
    private int countPairs(int[] nums, int target) {
        int res = 0, n = nums.length;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && (nums[j] - nums[i]) <= target) j++;
            res += j - i - 1;
        }
        return res;
    }
 }
