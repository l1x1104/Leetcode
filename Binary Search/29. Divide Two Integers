/***
Divide two integers without using multiplication, division and mod operator.

If it is overflow, return MAX_INT;          
***/

Thinking Path: For example, if we want to do 32 / 3,
               3 << 1 (*1) 
               6 << 1 (*2)
               12 << 1 (*4)
               24 << 1 (*8) still less than 32
               48 << 1 (*16) 48 is larger than 32. stop. And remember 8.
               Repeat process above again: do 8 / 3
               3 << 1 (6)
               6 << 1 (12 > 8, stop). And remember 6.
               so final result = 2 + 8;
--------------------------------------------------------------------------               
 class Solution {
    public int divide(int dividend, int divisor) {
        if(divisor == 0) return Integer.MAX_VALUE;
        if(dividend == Integer.MIN_VALUE) {
            if(divisor == -1) return Integer.MAX_VALUE;
            else if(divisor == 1) return Integer.MIN_VALUE;
        }
        
        long divd = (long) dividend;
        long divs = (long) divisor;
        int sign = 1;
        if(divd < 0) {
            divd = -divd;
            sign = -sign;
        }
        if(divs < 0) {
            divs = -divs;
            sign = -sign;
        }
        int res = 0;
        while(divd >= divs) {
            int shift = 0;
            while(divd >= divs << shift) {
                shift++;
            }
            res += (1 << (shift - 1));
            divd -= (divs << (shift - 1));
        }
        return sign * res;
    }
 }               
               
               
               
               
               
               
