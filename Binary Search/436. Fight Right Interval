/***
Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or 
equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start 
point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, 
you need output the stored value of each interval as an array.

Note:
You may assume the interval's end point is always bigger than its start point.
You may assume none of these intervals have the same start point.
Example 1:
Input: [ [1,2] ]

Output: [-1]

Explanation: There is only one interval in the collection, so it outputs -1.
Example 2:
Input: [ [3,4], [2,3], [1,2] ]

Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.
Example 3:
Input: [ [1,4], [2,3], [3,4] ]

Output: [-1, 2, -1]

Explanation: There is no satisfied "right" interval for [1,4] and [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point.
***/
class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        int[] res = new int[intervals.length];
        if (intervals.length == 1) {
            res[0] = -1;
            return res;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < intervals.length; i++) {
            map.put(intervals[i].start, i);
        }
        Arrays.sort(intervals, (a, b) -> (a.start - b.start));
        for (int i = 0; i < intervals.length; i++) {
            int index = map.get(intervals[i].start);
            int target = intervals[i].end;
            int start = i, end = intervals.length - 1;
            while (start  + 1 < end) {
                int mid = (start + end) / 2;
                int val = intervals[mid].start;
                if (val == target) {
                    start = mid; // 或者end = mid;
                    break;
                }
                else if (val < target) {
                    start = mid + 1;
                } else {
                    end = mid;
                }
            }
            if (intervals[end].start >= target) {
                if (intervals[start].start >= target) {
                    res[index] = map.get(intervals[start].start);
                } else {
                    res[index] = map.get(intervals[end].start); 
                }
            } else {
                res[index] = -1;
            }
        }
        return res;
    }
 }

注： binary search部分也可以这样写：
            while (start < end) {
                int mid = (start + end) / 2;
                int val = intervals[mid].start;
                if (val == target) {
                    res[i] = map.get(val);
                    break;
                }
                else if (val < target) {
                    start = mid + 1;
                } else {
                    end = mid;
                }
            }
            if (start < intervals.length && intervals[start].start >= intervals[i].end) {
                res[map.get(intervals[i].start)] = map.get(intervals[start].start);
            }
