QUESTION

Give a vote list = [(a, 100), (b, 150), (a, 200)] # (name, timestamp) and time T 
Find the highest number of votes (or anyone with the highest number of votes) at T 
ex: T = 100 -> a, T = 150 -> a or b, T = 200 -> a 

(2)followup1, give one more input K, find Top K votes at T 

(3)followup2, the same vote list, K, but given the Top K votes list, find the time T.

(1) For the first question, just travers the vote list and if vote.T <= T increment
the vote for person vote.Name. While doing that maximize the vote number. 
(O(n*l) time, O(c*l) space, c is the number of candidates, l is average length of name)
class Vote {
    int time;
    String name;
}

private String topK(Vote[] votes, int T) {
    Map<String, Integer> map = new HashMap<>();
    int max_count = 0;
    String max_name = "";
    for (Vote v: votes) { // O(n)
        int t = v.time;
        String n = v.name;
        if (t <= T) {
            if (!map.containsKey(v)) {  // O(l) : l is the lenth of candidate name
                map.put(n, 1);
            } else {
                int count = map.get(n) + 1;
                if (count > max_count) {
                    max_count = count;
                    max_name = n;
                }
                map.put(n, count);
                
            }
        }
    }
    return max_name;
}

Time: O(n * l)
Space: O(c * l) c is number of candidates

※ HashMap原理


(2) 多给一个input K, 找T时间之前, Top K 得票数的人
第三題我用到heap做
先O(n)算出時間<=T 內每個人得票數
然後再用一個大小最大是K的 minHeap 存Top K
把剛剛算過的跑一次for loop
如果 heap size < K, 直接push (得票數, 人名)
如果 heap size >= K, 比較heap[0]的得票數跟現在的得票數

（3）一样给vote list K, 但这次给Top K list, 找时间T
//I assume given are the top K candidates at a certain time T I have to find.
先整理出每個時間T每個人被投了幾票
然後從比較小的T開始累加得票數，重複做(3)的top k，看這次的top K有沒有等於input
有就return T
只是這樣如果同時間有多種組合的top k就可能找不到，但面試官說可以了
