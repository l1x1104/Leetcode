/***
A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

Write a function to determine if a number is strobogrammatic. The number is represented as a string.

For example, the numbers "69", "88", and "818" are all strobogrammatic.
***/

public boolean isStrobogrammatic(String num) {
    Map<Character, Character> map = new HashMap<Character, Character>();
    map.put('6', '9');
    map.put('9', '6');
    map.put('0', '0');
    map.put('1', '1');
    map.put('8', '8');
   
    int l = 0, r = num.length() - 1;
    while (l <= r) {
        if (!map.containsKey(num.charAt(l))) return false;
        if (map.get(num.charAt(l)) != num.charAt(r))
            return false;
        l++;
        r--;
    }
    
    return true;
}

  或者用数组表示
  public boolean isStrobogrammatic(String num) {
        int[] map = new int[10];
        map[6] = 9;
        map[9] = 6;
        map[1] = 1;
        map[0] = 0;
        map[8] = 8;
        
        char[] ca = num.toCharArray();
        int i = 0, j = ca.length - 1;
        while(i <= j) {
            int begin = ca[i] - '0';
            int end = ca[j] - '0';
            if((begin != 0 && map[begin] == 0) || map[begin] != end) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

写成单独一个函数，更传统
public boolean isStrobogrammatic(String num) {
    int left, right;
    left = 0;
    right = num.length()-1;
    
    while(left<=right) {
        if(!isGood(num.charAt(left), num.charAt(right)))
            return false;
            left++;
            right--;
    }
    return true;
}

public boolean isGood(char a, char b) {
    if( (a=='1'&&b=='1') || (a=='6'&&b=='9') || (a=='9'&&b=='6') || (a=='8'&&b=='8')  || (a=='0'&&b=='0') )
        return true;
    return false;
}
