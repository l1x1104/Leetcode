/***
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
***/

他山之石 -
这道题给了我们一个数组，让我们求最短的无序连续子数组，根据题目中的例子也不难分析出来是让我们找出数组中的无序的部分。那么我最开始的想法就是要确定无序子数组
的起始和结束位置，这样就能知道子数组的长度了.所以我们用一个变量start来记录起始位置，然后我们开始遍历数组，当我们发现某个数字比其前面的数字要小的时候，说
明此时数组不再有序，所以我们要将此数字向前移动，移到其应该在的地方，我们用另一个变量j来记录移动到的位置，然后我们考虑要不要用这个位置来更新start的值，当
start还是初始值-1时，肯定要更新，因为这是出现的第一个无序的地方，还有就是如果当前位置小于start也要更新，这说明此时的无序数组比之前的更长了。我们举个例
子来说明，比如数组[1,3,5,4,2]，第一个无序的地方是数字4，它移动到的正确位置是坐标2，此时start更新为2，然后下一个无序的地方是数字2，它的正确位置是坐标1
，所以此时start应更新为1，这样每次用i - start + 1来更新结果res时才能得到正确的结果.

方法一
 0  1  2  3  4   5   6
[6, 4, 9, 8, 10, 2, 15]

How do you come up the result?
i = 1   [4,6,9,8,10,2,15]
i = 2   [4,6,8,9,10,2,15]
i = 3   [4,6,8,9,2,10,15]

class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int start = -1, len = 0;
        for (int int i = 1; i < nums.length; i++) {
          if (nums[i - 1] > nums[i]) {
             int j = i;
             while (j > 0 && nums[j - 1] > nums[j]) {
               swap(nums, j);
               j --;
             }
             if (start == -1 || start > j) start = j;
             len = Math.max(len, i - start + 1);
          }
        }
        return len;
    }
    private void swap(int[] nums, int j) {
       int temp = nums[j - 1];
       nums[j - 1] = nums[j];
       nums[j] = temp;
    }
}

方法二 克隆数组
class Solution {
    public int findUnsortedSubarray(int[] a) {
      int[] b = a.clone();
      Arrays.sort(b);
      int s = 0, e = a.length - 1;
      while(s < a.length && a[s] == b[s]){
        s++;  
      }
      
      while(s < e && a[e] == b[e]){
        e--;  
      }    
      return e - s + 1;
    }
}



