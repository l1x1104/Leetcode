/***

Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).

Example:
Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]

***/

class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int m = points.length;
        int count = 0;
        
        for (int x = 0; x < m; x++) {
            Map<Integer, Integer> map = new HashMap<>();
            for (int y = 0; y < m; y++) {
                if (x == y) continue;
                int d = getDist(points[x], points[y]);
                map.put(d, map.getOrDefault(d, 0) + 1);
            }
            
            for (int val: map.values()) {
                if (val > 1) count += val * (val - 1);
            }
            map.clear();
        } 
        return count;
    }
    private int getDist(int[] x, int[] y) {
        int dx = x[0] - y[0];
        int dy = x[1] - y[1];
        return dx * dx + dy * dy;
    }
}
