/***

Given a set of keywords words and a string S, make all appearances of all keywords in S bold. Any letters between <b> and </b> 
tags become bold.

The returned string should use the least number of tags possible, and of course the tags should form a valid combination.

For example, given that words = ["ab", "bc"] and S = "aabcd", we should return "a<b>abc</b>d". Note that returning 
"a<b>a<b>b</b>c</b>d" would use more tags, so it is incorrect.

Note:

words has length in range [0, 50].
words[i] has length in range [1, 10].
S has length in range [0, 500].
All characters in words[i] and S are lowercase letters.

***/
https://discuss.leetcode.com/topic/116291/java-clean-code-merging-interval-solution

思路: 大概就是在一串字符里面找一个个区间，并且把区间用tag表示就可以了.
     For example:         index:  0  1  2  3  4  5  6  7  8 
                       String S: [a  a  b  c  d  a  e  d  c]
                       keywords: "ab" "bc" "da"
                                    [   ]
                                    [       ]
                                    [             ]
                       找substring: [1,2][2,3][4,5] -> [1,5]
class Solution {
    class Interval {
        int start;
        int end;
        public Interval(int s, int e) {
            start = s;
            end = e;
        }
    }
    public String boldWords(String[] words, String S) {
        int ls = S.length();
        List<Interval> list = new ArrayList<>();
        for (String word : words) {
            int lw = word.length();
            for (int i = 0; i < ls - lw + 1; i++) {
                if (S.substring(i, i + lw).equals(word)) list.add(new Interval(i, i + lw));
            }
        }
        Collections.sort(list, (l1, l2) -> (l1.start - l2.start));
        for (int i = 0; i < list.size(); i++) {
            if (i + 1 < list.size() && list.get(i + 1).start <= list.get(i).end) {
                list.get(i).end = Math.max(list.get(i).end, list.get(i + 1).end);
                list.remove(i + 1);
                i--;
            }
        }
        StringBuilder sb = new StringBuilder(S);
        for (int i = 0; i < list.size(); i++) {
            int start = list.get(i).start + i * 7, end = list.get(i).end + i * 7 + 3;
            sb.insert(start, "<b>").insert(end, "</b>");
        }
        return sb.toString();
    }
 }
